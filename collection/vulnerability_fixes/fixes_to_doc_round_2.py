import csv

import docx
from docx import Document
from docx.enum.dml import MSO_THEME_COLOR_INDEX
import sys
import pandas as pd
from ast import literal_eval

sys.path.append('..')
from vulnerability_fixes.find_fixes import load_update_commits, load_advisory_database, associate_commits_with_vulns  # noqa: E402
from vulnerability_fixes.identify import identify_applicable_vulnerabilities  # noqa: E402
from finder import *  # noqa: E402


# credit: https://stackoverflow.com/a/47666747/14376026
def add_hyperlink(paragraph, text, url):
    # This gets access to the document.xml.rels file and gets a new relation id value
    part = paragraph.part
    r_id = part.relate_to(url, docx.opc.constants.RELATIONSHIP_TYPE.HYPERLINK, is_external=True)

    # Create the w:hyperlink tag and add needed values
    hyperlink = docx.oxml.shared.OxmlElement('w:hyperlink')
    hyperlink.set(docx.oxml.shared.qn('r:id'), r_id, )

    # Create a w:r element and a new w:rPr element
    new_run = docx.oxml.shared.OxmlElement('w:r')
    rPr = docx.oxml.shared.OxmlElement('w:rPr')

    # Join all the xml elements together add add the required text to the w:r element
    new_run.append(rPr)
    new_run.text = text
    hyperlink.append(new_run)

    # Create a new Run object and add the hyperlink into it
    r = paragraph.add_run ()
    r._r.append (hyperlink)

    # A workaround for the lack of a hyperlink style (doesn't go purple after using the link)
    # Delete this if using a template that has the hyperlink style in it
    r.font.color.theme_color = MSO_THEME_COLOR_INDEX.HYPERLINK
    r.font.underline = True

    return hyperlink


def create_title_page(doc):
    doc.add_heading('Master Thesis: Labelling Fixes', 0)
    document.add_page_break()


def create_page(doc, index, fix_row, database, writer):
    doc.add_heading('Case {}'.format(index), level=1)
    p = doc.add_paragraph('Project: ')
    add_hyperlink(p, fix_row['repository'], 'https://github.com/{}'.format(fix_row['repository']))
    p = doc.add_paragraph('Pull Request: ')
    link = 'https://github.com/{}/pull/{}'.format(fix_row['repository'], fix_row['number'])
    add_hyperlink(p, link, link)
    doc.add_paragraph('Associated PRs: ')
    for pr in fix_row['associated']:
        p = doc.add_paragraph('', style='List Bullet')
        add_hyperlink(p, link.replace(str(fix_row['number']), str(pr)), link.replace(str(fix_row['number']), str(pr)))
    doc.add_paragraph('Fixing Commits: ')
    if not pd.isna(fix_row['commit_fix']):
        p = doc.add_paragraph('', style='List Bullet')
        link = 'https://github.com/{}/commit/{}'.format(fix_row['repository'], fix_row['commit_fix'])
        add_hyperlink(p, link, link)
    if not pd.isna(fix_row['commit_dev']):
        p = doc.add_paragraph('', style='List Bullet')
        link = 'https://github.com/{}/commit/{}'.format(fix_row['repository'], fix_row['commit_dev'])
        add_hyperlink(p, link, link)
    if not pd.isna(fix_row['commit_fix']):
        p = doc.add_paragraph('', style='List Bullet')
        link = 'https://github.com/{}/commit/{}'.format(fix_row['repository'], fix_row['commit_def'])
        add_hyperlink(p, link, link)
    p = doc.add_paragraph('Vulnerable Package: ')
    p.add_run(fix_row['package']).bold = True
    concerned_advisory_records = database[database['ghsa'] == row['ghsa']]
    table = doc.add_table(rows=1, cols=2)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Affected'
    hdr_cells[1].text = 'First Patched Release'
    concerned_advisory_records = \
        identify_applicable_vulnerabilities(datetime.strptime(fix_row['date'], '%Y-%m-%dT%H:%M:%SZ'),
                                            fix_row['to'],
                                            fix_row['package'],
                                            concerned_advisory_records)
    for _, row_a in concerned_advisory_records.iterrows():
        row_cells = table.add_row().cells
        row_cells[0].text = str(row_a['vulnerableVersionRange'])
        row_cells[1].text = str(row_a['firstPatchedVersion'])
    if pd.isna(fix_row['by']):
        by = None
    else:
        by = fix_row['by']
    if pd.isna(fix_row['comments']):
        comments = None
    else:
        comments = fix_row['comments']
    writer.writerow([index,
                     fix_row['repository'],
                     fix_row['number'],
                     fix_row['associated'],
                     fix_row['package'],
                     fix_row['ghsa'],
                     fix_row['fixed'],
                     by,
                     None,
                     fix_row['labels'],
                     [],
                     comments])
    doc.add_page_break()


if __name__ == '__main__':
    document = Document()
    create_title_page(document)
    upd_commits = associate_commits_with_vulns()
    fixes_labels_reduced = pd.read_csv(PATH_VULNERABILITY_FIXES['fixes_labels_reduced'], index_col=False)
    fixes_labels_reduced = fixes_labels_reduced.merge(upd_commits, how='inner', on=['repository', 'number', 'package'])
    fixes_labels_reduced['associated'] = fixes_labels_reduced['associated'].apply(literal_eval)
    fixes_labels_reduced = fixes_labels_reduced.sort_values(['repository', 'number'], ascending=True).reset_index()
    advisory_database = load_advisory_database()
    with open(PATH_VULNERABILITY_FIXES['fixes_labels_round_2'], 'w') as csv_labels:
        writer = csv.writer(csv_labels)
        writer.writerow(['case',
                         'repository',
                         'number',
                         'associated',
                         'package',
                         'ghsa',
                         'fixed',
                         'by',
                         'A',
                         'B',
                         'C',
                         'D'])
        for index, row in fixes_labels_reduced.iterrows():
            create_page(document, index, row, advisory_database, writer)
        document.save(os.path.join(DIR_VULNERABILITY_FIXES, 'data', 'fixes_round_2.docx'))