import sys
import csv
from ast import literal_eval
import requests
from tqdm import tqdm
import time
import pandas as pd
import json
import itertools

sys.path.append('..')
from finder import *  # noqa: E402
from config import *  # noqa: E402
from token_management import TokenManagerGraphQL, TokenManagerRestApi  # noqa: E402


class TimeRequest:

    def __init__(self, error_code_wait=1, timeout_wait=2, connection_loss_wait=60):
        self.error_code_wait = error_code_wait
        self.timeout_wait = timeout_wait
        self.connection_loss_wait = connection_loss_wait
        self.response = None

    @staticmethod
    def query_time_commit(repository, oid):
        return 'https://api.github.com/repos/{}/commits/{}'.format(repository, oid)

    @staticmethod
    def query_time_pr(repository, oid):
        return 'https://api.github.com/repos/{}/commits/{}/pulls'.format(repository, oid)

    def query_commit(self, repository, oid, level=0):
        def new_attempt(_time):
            time.sleep(_time)
            self.query_commit(repository, oid, level + 1)
            if level == 0:
                print('success!')

        try:
            request = requests.get(url=self.query_time_commit(repository, oid),
                                   headers={"Authorization": "Token " + manager.get_active_token(),
                                            "Accept": "application/vnd.github.v3.raw"},
                                   timeout=10)
            if request.status_code == 200:
                self.response = request.json()
                manager.decrease_remaining()
            else:
                if level < 10:
                    print('pr query for (repo {}, oid: {}) failed: {}'.format(repository, oid, request.status_code))
                    manager.decrease_remaining()
                    new_attempt(self.error_code_wait)
                else:
                    print('pr query for (repo {}, oid: {}) exceeded levels'.format(repository, oid))
                    self.response = None
        except requests.exceptions.Timeout as err:
            print('commit query for (repo {}, oid: {}) failed: {}'.format(repository, oid, err))
            new_attempt(self.timeout_wait)
        except requests.exceptions.ConnectionError as err:
            print('commit query for (repo {}, oid: {}) failed: {}'.format(repository, oid, err))
            new_attempt(self.connection_loss_wait)

    def query_pr(self, repository, oid, level=0):
        def new_attempt(_time):
            time.sleep(_time)
            self.query_commit(repository, oid, level + 1)
            if level == 0:
                print('success!')

        try:
            request = requests.get(url=self.query_time_pr(repository, oid),
                                   headers={"Authorization": "Token " + manager.get_active_token(),
                                            "Accept": "application/vnd.github.groot-preview+json",
                                            'User-Agent': 'request'},
                                   timeout=10)
            if request.status_code == 200:
                self.response = request.json()
                manager.decrease_remaining()
            else:
                if level < 10:
                    print('pr query for (repo {}, oid: {}) failed: {}'.format(repository, oid, request.status_code))
                    manager.decrease_remaining()
                    new_attempt(self.error_code_wait)
                else:
                    print('pr query for (repo {}, oid: {}) exceeded levels'.format(repository, oid))
                    self.response = None
        except requests.exceptions.Timeout as err:
            print('pr query for (repo {}, oid: {}) failed: {}'.format(repository, oid, err))
            new_attempt(self.timeout_wait)
        except requests.exceptions.ConnectionError as err:
            print('pr query for (repo {}, oid: {}) failed: {}'.format(repository, oid, err))
            new_attempt(self.connection_loss_wait)

    def query_times(self):
        fixes_labels = pd.read_csv(PATH_VULNERABILITY_FIXES['fixes_labels'], index_col=False)
        repositories = list(set(fixes_labels['repository'].to_list()))
        commits = dict()
        for repository in tqdm(repositories):
            oids = []
            rows = fixes_labels[fixes_labels['repository'] == repository]
            for index, row in rows.iterrows():
                if not pd.isna(row['commit_fix']):
                    oids.append(row['commit_fix'])
                if not pd.isna(row['commit_dev']):
                    oids.append(row['commit_dev'])
                if not pd.isna(row['commit_def']):
                    oids.append(row['commit_def'])
            commits[repository] = list(set(oids))
        with open(PATH_VULNERABILITY_FIXES['fixes_commits_times'], 'w') as output:
            writer = csv.writer(output)
            writer.writerow([
                'repository',
                'oid',
                'author_time',
                'committer_time',
                'author_login',
                'pr_number',
                'pr_created_at',
                'pr_updated_at',
                'pr_closed_at',
                'pr_merged_at',
                'pr_author_login'
            ])
            for repository in tqdm(repositories):
                for commit in commits[repository]:
                    self.query_commit(repository, commit)
                    if self.response:
                        row_repository = repository
                        row_oid = commit
                        row_author_time = self.response['commit']['author']['date']
                        row_committer_time = self.response['commit']['committer']['date']
                        try:
                            row_author_login = self.response['author']['login']
                        except TypeError:
                            row_author_login = 'git_deleted_user'
                        self.query_pr(repository, commit)
                        if self.response:
                            if len(self.response) > 0:
                                row_pr_number = self.response[0]['number']
                                row_pr_created_at = self.response[0]['created_at']
                                row_pr_updated_at = self.response[0]['updated_at']
                                row_pr_closed_at = self.response[0]['closed_at']
                                row_pr_merged_at = self.response[0]['merged_at']
                                try:
                                    row_pr_author_login = self.response[0]['user']['login']
                                except TypeError:
                                    row_pr_author_login = 'git_deleted_user'
                                except KeyError:
                                    print(json.dumps(self.response, indent=4, sort_keys=True))
                            else:
                                row_pr_number = None
                                row_pr_created_at = None
                                row_pr_updated_at = None
                                row_pr_closed_at = None
                                row_pr_merged_at = None
                                row_pr_author_login = None
                        else:
                            row_pr_number = None
                            row_pr_created_at = None
                            row_pr_updated_at = None
                            row_pr_closed_at = None
                            row_pr_merged_at = None
                            row_pr_author_login = None
                        writer.writerow([
                            row_repository,
                            row_oid,
                            row_author_time,
                            row_committer_time,
                            row_author_login,
                            row_pr_number,
                            row_pr_created_at,
                            row_pr_updated_at,
                            row_pr_closed_at,
                            row_pr_merged_at,
                            row_pr_author_login
                        ])


if __name__ == '__main__':
    manager = TokenManagerRestApi(GITHUB_TOKENS)
    requester = TimeRequest()
    requester.query_times()
