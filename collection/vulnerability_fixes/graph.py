import sys
import re

sys.path.append('..')
from finder import *  # noqa: E402


class NetworkGraph:
    def __init__(self, repository):
        self.repository = repository
        self.slug = self.repository.split('/')
        self.owner = self.slug[0]
        self.name = self.slug[1]
        self.commits = dict()
        self.existing_commits = []
        self.def_branch_commits = []
        self.existing = dict()
        self.graph = dict()
        self.inverse_graph = dict()
        with open(os.path.join(DIR_NETWORK, self.owner+'@'+self.name+'.txt'), 'r') as graph_file:
            self.graph_file = graph_file.readlines()
        self.construct_graph()

    def construct_graph(self):
        graph_lines = [x.strip() for x in self.graph_file]
        for index, line in enumerate(reversed(graph_lines)):
            if index == 0:
                sha = line.split(',')[0].split(' ')[-1]
                self.commits[sha] = True
                commit_path = os.path.join(DIR_FREEZE, self.repository, sha)
                self.existing[sha] = os.path.exists(commit_path)
                self.inverse_graph[sha] = []
                self.def_branch_commits.append(sha)
                if self.existing[sha]:
                    self.existing_commits.append(sha)
            else:
                if bool(re.search(r'\d', line)):
                    sha = line.split(',')[0].split(' ')[-1]
                    self.commits[sha] = line[0] == '*'
                    if self.commits[sha]:
                        self.def_branch_commits.append(sha)
                    commit_path = os.path.join(DIR_FREEZE, self.repository, sha)
                    self.existing[sha] = os.path.exists(commit_path)
                    parents = line.split(',')[-2].split(' ')
                    if self.existing[sha]:
                        self.existing_commits.append(sha)
                    self.inverse_graph[sha] = parents
                    for parent in parents:
                        if parent in self.graph:
                            self.graph[parent].append(sha)
                        else:
                            self.graph[parent] = [sha]

    # def reachability(self):
    #     for commit in self.existing_commits:
    #         for key, value in self.inverse_reconstructed_graph_first_order[commit].items():
    #             if value:
    #                 self.graph[key].append(commit)
    #     for commit in self.existing_commits:
    #         self.graph[commit] = list(set(self.graph[commit]))
    #     # for commit in self.existing_commits:
    #     #     for child1 in self.graph[commit]:
    #     #         al_present = False
    #     #         for child2 in self.graph[commit]:
    #     #             if child1 in self.graph[child2]:
    #     #                 al_present = True
    #     #         if not al_present:
    #     #             self.graph2[commit].append(child1)
    #     with open(os.path.join(DIR_VULNERABILITY_FIXES, 'data', 'reachability',
    #                            self.owner+'@'+self.name+'.json'), "w") as write_file:
    #         json.dump(self.graph, write_file, indent=4)

    def get_children(self, sha):
        return self.graph[sha]

    def get_parents(self, sha):
        return self.inverse_graph[sha]

    def get_family_tree_recursive(self, sha):
        pass

    def is_def_branch(self, sha):
        return self.commits[sha]
#
#
# if __name__ == '__main__':
#     repo_names = pd.read_csv(PATH_REPOSITORIES_DATA['dependabot_filtered_repos'], index_col=False)[
#         'repository'].tolist()
#     repo_names.remove('hull/hull-connectors')
#     for repo in tqdm(repo_names):
#         graph = NetworkGraph(repo)
#         graph.reachability()
