import json
from datetime import datetime
import pathlib
import os


def package_json_vulnerable(path, package, database, js):
    is_vulnerable = False
    vulnerabilities_ghsa = []
    vulnerabilities_ranges = []
    workspaces = []
    with open(path, 'r') as package_json:
        file = json.load(package_json)
        try:  # special case someone submitted package-lock.json as package.json
            package_lock_file = file["lockfileVersion"]
            return False, '', False, vulnerabilities_ghsa, vulnerabilities_ranges, []
        except KeyError:
            pass
    in_runtime = False
    in_development = False
    constraint = []
    try:
        workspaces = file['workspaces']
    except KeyError:
        pass
    try:
        constraint.append(file['dependencies'][package])
        in_runtime = True
    except KeyError:
        pass
    try:
        constraint.append(file['devDependencies'][package])
        in_runtime = True
    except KeyError:
        pass
    is_present = in_runtime or in_development
    if is_present:
        unbound = (constraint[0] == '*') or (constraint[0] == 'latest')
        if not unbound:
            for index, advisory in database.iterrows():
                is_affected = False
                first_patched_version = advisory['firstPatchedVersion']
                affected_range = advisory['vulnerableVersionRange']
                is_simple = len(affected_range.split(' ')) == 1
                if is_simple:
                    if affected_range[0] == '<':
                        if affected_range[1] == '=':
                            safe_range = '>=' + first_patched_version
                            is_affected = not js.call('intersects', constraint[0], safe_range)
                        else:
                            safe_range = affected_range.replace('<', '>=')
                            is_affected = not js.call('intersects', constraint[0], safe_range)
                    else:
                        if js.call('intersects', constraint[0], affected_range[1:]):
                            is_affected = not js.call('intersects', constraint[0], '>=' + first_patched_version)
                        else:
                            is_affected = False
                else:
                    ranges = affected_range.split(' ')
                    lower_bound = ranges[0]
                    upper_bound = ranges[1]
                    if js.call('intersects', constraint[0], lower_bound):
                        if upper_bound[0] == '<':
                            if upper_bound[1] == '=':
                                safe_range = '>=' + first_patched_version
                                is_affected = not js.call('intersects', constraint[0], safe_range)
                            else:
                                safe_range = affected_range.replace('<', '>=')
                                is_affected = not js.call('intersects', constraint[0], safe_range)
                    else:
                        is_affected = False
                if is_affected:
                    is_vulnerable = True
                    vulnerabilities_ghsa.append(advisory['ghsa'])
                    vulnerabilities_ranges.append(affected_range)
    return is_present, constraint, is_vulnerable, vulnerabilities_ghsa, vulnerabilities_ranges, workspaces


def package_json_workspaces(directory, workspaces, package):
    constraints = []
    if type(workspaces) is list:
        for workspace in workspaces:
            for path in pathlib.Path(directory).glob(os.path.join(workspace, 'package.json')):
                try:
                    with open(str(path), 'r') as package_json:
                        file = json.load(package_json)
                        try:
                            constraints.append(file['dependencies'][package])
                        except KeyError:
                            pass
                        try:
                            constraints.append(file['devDependencies'][package])
                        except KeyError:
                            pass
                except FileNotFoundError:
                    pass
    elif type(workspaces) is dict:
        try:
            for workspace in workspaces['packages']:
                for path in pathlib.Path(directory).glob(os.path.join(workspace, 'package.json')):
                    try:
                        with open(str(path), 'r') as package_json:
                            file = json.load(package_json)
                            try:
                                constraints.append(file['dependencies'][package])
                            except KeyError:
                                pass
                            try:
                                constraints.append(file['devDependencies'][package])
                            except KeyError:
                                pass
                    except FileNotFoundError:
                        pass
        except KeyError:
            pass
    return constraints
