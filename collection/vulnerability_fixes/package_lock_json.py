import json
import execjs
from datetime import datetime
from semver import satisfies


def package_lock_json_vulnerable(path, package, is_present, database, js):
    # js = execjs.compile("""
    #             const semver = require('semver');
    #             function satisfies(x, y) {
    #                 return semver.satisfies(x, y);
    #             }
    #         """)
    with open(path, 'r') as package_lock_json:
        manifest = json.load(package_lock_json)
    is_vulnerable = False
    vulnerabilities_ghsa = []
    vulnerabilities_ranges = []
    installed = []
    if is_present:
        try:
            installed.append(manifest['dependencies'][package]['version'])
        except KeyError:
            recursive_search(manifest, package, installed)
    else:
        recursive_search(manifest, package, installed)
    if installed:
        for index, advisory in database.iterrows():
            is_affected = False
            affected_range = advisory['vulnerableVersionRange']
            for version in installed:
                try:
                    is_affected = is_affected or satisfies(version, affected_range)
                except ValueError:
                    pass
            if is_affected:
                is_vulnerable = True
                vulnerabilities_ghsa.append(advisory['ghsa'])
                vulnerabilities_ranges.append(affected_range)
    return is_vulnerable, vulnerabilities_ghsa, vulnerabilities_ranges


def recursive_search(block, package, installed):
    dependencies = []
    try:
        dependencies = block['dependencies']
    except KeyError:
        pass
    for dependency in dependencies:
        recursive_search(block['dependencies'][dependency], package, installed)
    try:
        installed.append(block['dependencies'][package]['version'])
    except KeyError:
        pass

