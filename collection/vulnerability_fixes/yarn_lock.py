import json
import execjs
from datetime import datetime
from semver import satisfies


# def yarn_lock_vulnerable(path, package, affected_ranges):
#     js = execjs.compile("""
#         const fs = require('fs');
#         const lockfile = require('@yarnpkg/lockfile');
#         function parse_yarn(path) {
#             let file = fs.readFileSync(path, 'utf8');
#             let json = JSON.stringify(lockfile.parse(file).object);
#             return json;
#         }
#         const semver = require('semver');
#         function satisfies(x, y) {
#             return semver.satisfies(x, y);
#         }
#     """)
#     manifest = json.loads(js.call('parse_yarn', path))
#     vulnerable = False
#     for dependency in manifest:
#         if package == dependency.split('@')[0]:
#             for constraint in affected_ranges:
#                 if js.call('satisfies', manifest[dependency]['version'], constraint):
#                     vulnerable = vulnerable or True
#     return vulnerable

def yarn_lock_vulnerable(path, package, is_direct, constraints, database, js):
    # js = execjs.compile("""
    #         const fs = require('fs');
    #         const lockfile = require('@yarnpkg/lockfile');
    #         function parse_yarn(path) {
    #             let file = fs.readFileSync(path, 'utf8');
    #             let json = JSON.stringify(lockfile.parse(file).object);
    #             return json;
    #         }
    #         const semver = require('semver');
    #         function satisfies(x, y) {
    #             return semver.satisfies(x, y);
    #         }
    #     """)
    is_vulnerable = False
    vulnerabilities_ghsa = []
    vulnerabilities_ranges = []
    manifest = json.loads(js.call('parse_yarn', path))
    installed = []
    if is_direct:
        for constraint in constraints:
            try:
                installed.append(manifest[package + '@' + constraint]['version'])
            except KeyError:
                pass
        if not installed:
            for dependency in manifest:
                if package == dependency.split('@')[0]:
                    installed.append(manifest[dependency]['version'])
    else:
        for dependency in manifest:
            if package == dependency.split('@')[0]:
                installed.append(manifest[dependency]['version'])
    for index, advisory in database.iterrows():
        is_affected = False
        affected_range = advisory['vulnerableVersionRange']
        for version in installed:
            try:
                is_affected = is_affected or satisfies(version, affected_range)
            except ValueError:
                pass
        if is_affected:
            is_vulnerable = True
            vulnerabilities_ghsa.append(advisory['ghsa'])
            vulnerabilities_ranges.append(affected_range)
    return is_vulnerable, vulnerabilities_ghsa, vulnerabilities_ranges
